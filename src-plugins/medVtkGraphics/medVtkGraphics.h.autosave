/*=========================================================================

 medInria

 Copyright (c) INRIA 2013. All rights reserved.
 See LICENSE.txt for details.
 
  This software is distributed WITHOUT ANY WARRANTY; without even
  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE.

=========================================================================*/

#pragma once

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractView.h>

#include <medAbstractView.h>
#include "medVtkGraphicsPluginExport.h"

class medVtkGraphicsPrivate;


class MEDVTKGRAPHICSPLUGIN_EXPORT medVtkGraphics : public medAbstractView
{
    Q_OBJECT

public:
             medVtkGraphics();
    virtual ~medVtkGraphics();

    virtual QString description() const;
    virtual QString identifier() const;

    static bool registered();
    static QString s_identifier();

public:
    // inherited from medAbstractView
    void reset();
    void clear();
    void update();

    void *view();

    /**
     * Inputs the data to the vtkImageView2D/3D.
     * @param layer - specifies at which layer the image is inputed.
     * Layer N if always shown on top of layer N-1. By playing with
     * visibility and opacity, it is possible to show multiple images
     * on top of each others.
     */
    void setData(dtkAbstractData *data, int layer);

    void setSharedDataPointer(dtkSmartPointer<dtkAbstractData> data);

    /**
     * Inputs the data to the vtkImageView2D/3D instances.
     * Calling setData(data) will automatically position the data in
     * the next available layer. Example:
     * - first call  -> layer 0
     * - second call -> layer 1
     * ...
     * To set the data at a specific layer, call setData(data, layer).
     * To set the data to the first layer, call setData(data, 0).
     */
    void setData(dtkAbstractData *data);

    void *data();

    QWidget *receiverWidget();
    QWidget *widget();

    void close();

public slots:
    // inherited from medAbstractView
    void onPositionChanged  (const  QVector3D &position);
    void onZoomChanged      (double zoom);
    void onPanChanged       (const  QVector2D &pan);
    void onWindowingChanged (double level, double window);
    void onCameraChanged    (const  QVector3D &position,
                             const  QVector3D &viewup,
                             const  QVector3D &focal,
                             double parallelScale);

    void onVisibilityChanged(bool   visible, int layer);
    void onOpacityChanged   (double opacity, int layer);

    medVtkGraphicsPrivate *d;

    friend class medVtkGraphicsObserver;
};

dtkAbstractView *createmedVtkGraphics();


